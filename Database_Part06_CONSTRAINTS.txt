(6)제약조건 - 2020. 03. 31. 화

======개념설명==================================================
1. 제약조건
-NOT NULL, PRIMARY KEY, FOREIGN KEY, UNIQUE, CHECK
    >>NULL 과 ''는 다른 값이다.
	>> NOT NULL이 지정된 컬럼은 반드시 값을 지정해야 한다.

2. PRIMARY KEY	
테이블 내의 레코드 식별자. 주키는 테이블 내에 있는 행을 대표하는 키이다.
한행을 대표하는 키이다.(기본키) -> 테이블의 엔티티의 무결성에 사용된다.
테이블은 오직 하나만의 PRIMARY KEY 제약조건을 가진다.
NULL 값 불가.
테이블에 대하여 PRIMARY KEY 조건을 지정하면, 데이터베이스 엔진은 해당 열에 대하여
고유 인덱스를 만들어 데이터의 고유성을 적용한다. (인덱스를 이용하여 엑세스 속도 빨라짐.)

======실습1==================================================
<주키 지정하는 3가지 방법>
1.
DROP TABLE if EXISTS test;
CREATE TABLE test(
num INT NOT NULL PRIMARY key,
t_name VARCHAR(20) NOT NULL
)ENGINE=INNODB DEFAULT CHARSET=UTF8;
DESC test;

2.
DROP TABLE if EXISTS test;
CREATE TABLE test(
num INT NOT NULL,
t_name VARCHAR(20) NOT NULL,
PRIMARY KEY(num)
)ENGINE=INNODB DEFAULT CHARSET=UTF8;
DESC test;

3.
DROP TABLE if EXISTS test;
CREATE TABLE test(
num INT NOT NULL,
t_name VARCHAR(20) NOT NULL
)ENGINE=INNODB DEFAULT CHARSET=UTF8;
ALTER TABLE test ADD PRIMARY KEY(num);
DESC test;

-주키 삭제하기
ALTER TABLE test DROP PRIMARY KEY;

-주키 추가하기(설정하기)
ALTER TABLE test ADD PRIMARY KEY(num);

-다중키 만들기
CREATE TABLE board(
num INT Unsigned NOT NULL,
subnum INT Unsigned NOT NULL,
PRIMARY KEY(num, subnum)
)ENGINE=

-다중키 추가하기(설정하기)
ALTER TABLE board add PRIMARY KEY(num, subnum);

cf) 복수키 프라이머리키는 한테이블에 2개 이상있을 수 없다.
자동으로 인덱스가 적용되어 검색속도가 빨라지지만, 전체적인 데이타베이스의 부하가 높아진다.
다중키 멀티키 속성 두개로 주키가 된다.



======개념설명==================================================
3. FOREIGN KEY
외래키라고 하며, 두 테이블 간 연결을 설정하고, 강제 적용하는데 사용된다.
FOREIGN KEY 제약조건은 참조키를 가지게 되는데, 이때 참조키는 다른 테이블의 주키를 참조하게 된다.
   >>참조의 무결성!!!!!!!!
   >>저장된 값 이외의 값은 저장할 수 없게 된다.
   
=======실습2===================================================
<외래키 만들기>
-테이블 생성
CREATE TABLE mobile(
id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, 
typename Varchar(20)	NOT NULL,
memberid INT UNSIGNED not NULL 
)ENGINE=INNODB DEFAULT CHARSET=UTF8;

-외래키 추가하기
ALTER TABLE mobile ADD  FOREIGN KEY (memberid)
REFERENCES members(id);

-해당 테이블에 데이터 삽입하기.
INSERT INTO mobile(typename, memberid)VALUES ('grander',3);
INSERT INTO mobile VALUES (DEFAULT, 'sonata',1);

-확인하기
SELECT * FROM mobile;

cf)외래키를 사용함으로써, 참조의 무결성이 보장이 된다.
부모 테이블에 있는 값이 아닌 것으로 자식 테이블은 추가하지 못하고
자식테이블에 있는 부모테이블의 참조값은 함부로 삭제하거나 수정할 수 없다.

cf) 삭제했다가 다시 추가해도 그전에 입력 되었었던 값 뒤로 이어서 시리얼 넘버가 지정된다.
InnoDB를 쓰고 있어서 그럼. 다른 버전은 최대값 잘 맞춰서 들어간다.
AUTO_INCREMENT 의 제약을 잘 살필것.
check는 입력되는 값을 확인한다. 조건이 만족이 될시 값을 삽입한다.

=======실습3===================================================
-부모 테이블 1 생성
CREATE TABLE category(
c_code CHAR(2) NOT NULL PRIMARY KEY, 
c_name VARCHAR(200) NOT NULL)
ENGINE=INNODB DEFAULT CHARSET=UTF8;

-부모 테이블 2 생성
CREATE TABLE ingredient(
i_code CHAR(2) NOT NULL PRIMARY KEY, 
i_name VARCHAR(200) NOT NULL)
ENGINE=INNODB DEFAULT CHARSET=UTF8;

-자식 테이블 생성
CREATE TABLE product(
p_code CHAR(4) NOT NULL PRIMARY KEY, 
p_name VARCHAR(200) NOT NULL, 
c_code CHAR(2) NOT NULL,
i_code CHAR(2) NOT NULL)
ENGINE=INNODB DEFAULT CHARSET=UTF8;

-부모 테이블 1 값 삽입하기
INSERT INTO category VALUES ('00', '미분류');

<트리거 설정>
-자식 테이블에 외래키 설정하기(DELETE RESTRICT)
ALTER TABLE product ADD FOREIGN KEY(c_code)
REFERENCES category(c_code)
ON DELETE RESTRICT;
   ->자식이 존재하는 한 삭제 불가

-자식 테이블에 외래키 설정하기(DELETE CASCADE)
ALTER TABLE product ADD FOREIGN KEY(c_code)
REFERENCES category(c_code)
ON DELETE CASCADE
   ->자식까지 다 삭제할 것

-자식 테이블에 외래키 설정하기(ON DELETE RESTRICT ON UPDATE CASCADE)
ALTER TABLE product ADD FOREIGN KEY(c_code)
REFERENCES category(c_code)
ON DELETE RESTRICT
ON UPDATE CASCADE
   ->자식의 것도 함께 업데이트 할것.

-부모 테이블 1 값 삽입하기
INSERT INTO category VALUES ('01', '빵');

-자식 테이블 값 삽입하기
INSERT INTO product VALUES ('p001', '고구마빵', '01', '00');

-자식이 있는 속성 삭제 시도해보기
DELETE FROM category WHERE c_code = '01';
>>거부가 된다 왜? 자식이 있기 때문이다.

UPDATE category SET c_code = '02'
WHERE c_code = '01';
>>업데이트 하기

DELETE FROM peoduc;
DELETE FROM category WHERE c_code = '02';
>>자식이 없어서 삭제가 가능해진다.

reference_option:
  RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT
  -------------------
  
  
======개념설명==================================================
4. UNIQUE
컬럼의 값은 오직 유일해야한다.
변경의 실행타임을 저하시킨다.
이러한 문제점을 보안한기 위해, 제약조건의 컬럼에 대하여 자동으로 Index를 지정.

SHOW INDEX FROM TABLEName; ->현재 테이블에 걸려있는 모든 인덱스를 출력

컬럼에 대해서 인덱스를 걸면 전체적인 데이터 속도는 줄지만 검색속도는 빨라진다.
결국은 주키도 유니크 유니크도 유니크. 다 인덱스가 생긴다.
인덱스를 사용한다면, 되도록이면 검색량이 많은 열에 인덱스를 추가하는 것이 좋다.
그렇다고 varchar 에다가 걸면 안된다. 가변형이기 때문이다
외래키는 인덱스가 자동으로 드롭되지 않는다
따라서 직접적은로 삭제할 수 밖에 없는 상황이 온다.

5. CHECK
check는 값에 대한 판단이다.
컬럼에 저장되는 값을 검사하기 위한 제약조건

=======실습4===================================================
-TABLE 설정 확인하기
SHOW CREATE TABLE product;

->결과값
CREATE TABLE `product` (
  `p_code` char(4) NOT NULL,
  `p_name` varchar(200) NOT NULL,
  `c_code` char(2) NOT NULL,
  `i_code` char(2) NOT NULL,
  PRIMARY KEY (`p_code`),
  KEY `c_code` (`c_code`), <<인덱스키
  CONSTRAINT `product_ibfk_1` FOREIGN KEY (`c_code`) REFERENCES `category` (`c_code`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8
    >>외래키를 삭제해도 인덱스는 남아있다.

-외래키 삭제하기
ALTER TABLE product DROP FOREIGN KEY `product_ibfk_1`;

-TABLE 설정 확인하기
SHOW CREATE TABLE product;

->결과값
CREATE TABLE `product` (
  `p_code` char(4) NOT NULL,
  `p_name` varchar(200) NOT NULL,
  `c_code` char(2) NOT NULL,
  `i_code` char(2) NOT NULL,
  PRIMARY KEY (`p_code`),
  KEY `c_code` (`c_code`)<<여전히 인덱스가 남아있다
) ENGINE=InnoDB DEFAULT CHARSET=utf8

ALTER TABLE product DROP KEY c_code;
>>인덱스키도 별도로 지워주는 작업이 필요하다.

-외래키 추가하기
ALTER TABLE product ADD FOREIGN KEY (c_code) 
REFERENCES category(c_code) 
ON DELETE RESTRICT 
ON UPDATE CASCADE;

-외래키 추가하기
ALTER TABLE product ADD FOREIGN KEY(i_code)
REFERENCES ingredient(i_code)
ON UPDATE CASCADE;

-값 삽입하기
INSERT INTO ingredient VALUES ('01', 'flour');
INSERT INTO category VALUES ('01', 'bread');
INSERT INTO product VALUES ('p001', 'melon', '01', '01');

=======실습5===================================================
-테이블 생성
CREATE TABLE book(
id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, 
title VARCHAR(200) NOT NULL, 
price MEDIUMINT UNSIGNED NOT NULL DEFAULT 0,
CHECK (price BETWEEN 0 AND 1000000))
ENGINE=INNODB DEFAULT CHARSET=UTF8; 

INSERT INTO book VALUES (DEFAULT, 'java', 10000);

-테이블 생성
CREATE TABLE courses(
id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, 
c_name VARCHAR(200) NOT NULL, 
ctype CHAR(10) NOT NULL,
CHECK(ctype IN('전문가과정', '학생과정', '일반인과정')))
ENGINE INNODB DEFAULT CHARSET=UTF8;

INSERT INTO courses VALUES(DEFAULT, '자바프로그램', '일반인과정');

-테이블 설정 확인하기
SHOW CREATE table courses;

->결과값
CREATE TABLE `courses` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `c_name` varchar(200) NOT NULL,
  `ctype` char(10) NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `CONSTRAINT_1` CHECK (`ctype` in ('전문가과정','학생과정','일반인과정'))
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8

ALTER TABLE courses DROP CONSTRAINT CONSTRAINT_1;
<<제약사항을 없애기

ALTER TABLE courses ADD CHECK (ctype IN ('전문가과정', '학생과정', '일반인과정'));
<<제약사항을 다시 추가하기



//끝 moosongsong
