(7) 조인 복습 2020.04.02.목

==복습===
-Theta Join----------------------------------------
SELECT * FROM category;
SELECT *FROM comics;
SELECT * FROM publisher;
SELECT * FROM category ca, comics co, publisher pu
WHERE ca.category_code = co.category_code
AND co.publisher_code = pu.publisher_code
AND ca.category_code LIKE 'fant';

예약어를 속성명으로 지정했을 경우
``로 감싸서 사용하면 된다.
각자 편한 것 사용하면 된다.

-Natural Join----------------------------------------
SELECT * FROM category;
SELECT *FROM comics;
SELECT * FROM publisher;
SELECT * FROM comics NATURAL JOIN category
NATURAL JOIN publisher;
 >>이름만 같을뿐 관련이 없는 다른 값일 수도 있다.
 따라서 이점에 대해 유의 하면서 inner join을 사용하는 방법이 있다.
 
-Inner Join----------------------------------------
SELECT * FROM category;
SELECT *FROM comics;
SELECT * FROM publisher;
SELECT * FROM comics 
JOIN category USING (category_code)
JOIN ratings ON(comics.id = ratings.comics_id);
 >>inner를 기재하지 않아도 기본값이 inner join이기 때문에 비기재해도 괜찮다.
 
-Outer Join----------------------------------------
SELECT * FROM category;
SELECT *FROM comics;
SELECT * FROM publisher;
SELECT * FROM comics 
right JOIN category USING (category_code);

SELECT * FROM comics 
right JOIN category USING (category_code)
LEFT JOIN publisher USING (publisher_code);

 >>앞의 조인부터 차례대로 조인이 실행된다.

-group function---------------------------------------
SELECT 
	CURRENT_TIMESTAMP(), 
	LEFT(category_code, 1),
	category_code, 
	category_name
FROM category;

SELECT 
	COUNT(*) AS '수', 
	MIN(price) AS '최소',
	MAX(price) AS '최대',
	AVG(price) AS '평균',
	SUM(price) AS '합'
FROM comics
GROUP BY category_code;

SELECT 
	co.category_code, ca.category_name,
	COUNT(*) AS '수', 
	MIN(price) AS '최소',
	MAX(price) AS '최대',
	AVG(price) AS '평균',
	SUM(price) AS '합'
FROM comics co JOIN category ca USING(category_code)
GROUP BY category_code;

-----------------------------------------------------------
>>from절에는 함수가 나타날수 없다.
그러나 where절에는 함수가 나타날수 있다.

예시)
SELECT * FROM comics
WHERE LEFT(category_code,2) = 'FA';	


>>그러나 where절에는 그룹함수로 비교가 불가능하다.
->그룹함수 사용 불가!!!!!
->따라서 where절에서 그룹함수를 쓰고 싶다면
->서브쿼리 문으로 작성해야 한다.

SELECT* FROM comics
WHERE price = (SELECT MAX(price) FROM comics);	



SELECT* 
FROM comics
WHERE category_code in (SELECT distinct category_code 
					FROM comics 
					WHERE price > 17000);

SELECT 
	(SELECT category_name FROM category 
	WHERE category_code = comics.category_code) AS ca_name,
	category_code, 
	title
FROM comics;
>>select 절에서는 절대 서브쿼리 사용하지 말자
>>튜플당 계산을 계속하게 되기 때문에 성능이 떨어진다.


SELECT * 
FROM comics 
LEFT JOIN 
	(SELECT 
	comics_id as id,
	SUM(rating_price*rating_price) AS total
	FROM ratings
	GROUP BY comics_id) AS sub1
USING(id); 


SELECT co.category_code, 
		COUNT(*) AS totalCount,
		SUM(rating_count) AS totalCount,
		SUM(ra.rating_price*ra.rating_count) AS totalPrice
FROM comics co 
LEFT JOIN ratings ra 
ON (co.id = ra.comics_id)
GROUP BY co.category_code;


SELECT category.category_name,
	temp.ccount,
	temp.totalCount, 
	temp.totalPrice
FROM category , 
	(SELECT co.category_code AS ccode, 
			COUNT(*) AS ccount,
			SUM(rating_count) AS totalCount,
			SUM(ra.rating_price*ra.rating_count) AS totalPrice
	FROM comics co 
	LEFT JOIN ratings ra 
	ON (co.id = ra.comics_id)
	GROUP BY co.category_code) temp
WHERE category.category_code = temp.ccode;

SELECT comics_id, 
		SUM(rating_count * rating_price),
		floor(AVG(rating_price))
FROM ratings
GROUP BY comics_id
WITH rollup;

SELECT comics_id, 
		SUM(rating_count * rating_price),
		floor(AVG(rating_price))
FROM ratings
WHERE comics_id <=10
GROUP BY comics_id
WITH rollup;


======================================================
CREATE TABLE book_category (
bc_code VARCHAR(20) NOT NULL, 
bc_name VARCHAR(200) NOT NULL, 
bc_upcode VARCHAR(20) NOT NULL DEFAULT '00')
ENGINE=INNODB DEFAULT CHARSET=UTF8;

INSERT INTO book_category VALUES ('PROGRAMMING', '프로그래밍', DEFAULT);
INSERT INTO book_category VALUES ('REFFERENCE', '참고서', DEFAULT);
INSERT INTO book_category VALUES ('NOVEL', '소설', DEFAULT);
INSERT INTO book_category VALUES ('JAVA', '자바', 'PROGRAMMING');
INSERT INTO book_category VALUES ('WEB', '웹기술', 'PROGRAMMING');
INSERT INTO book_category VALUES ('MYSQL', 'MySql', 'PROGRAMMING');
INSERT INTO book_category VALUES ('JAVA BASIC', '자바 기초', 'JAVA');



SELECT DISTINCT temp1.bc_code, temp1.bc_name, temp2.bc_code, temp2.bc_name
FROM book_category temp1
, book_category temp2
WHERE temp1.bc_upcode = temp2.bc_code;

SELECT temp1.bc_code AS '분류코드', 
		temp1.bc_name AS '분류명', 
		temp2.bc_code AS '상위코드', 
		temp2.bc_name as '상위분류명'
FROM book_category temp1
LEFT join book_category temp2
ON( temp1.bc_upcode = temp2.bc_code);


CREATE table temp(
t_code VARCHAR(20) NOT NULL, 
t_name VARCHAR(200) NOT NULL )
ENGINE=INNODB DEFAULT CHARSET=UTF8;

INSERT INTO temp
SELECT bc_code, bc_name
FROM book_category;






=트랜잭션
일련의 연속된 작업처리를 제어할 수 있는 기능


-주키 업데이트 할때 숫자 중복이 발생하기 때문에, 거꾸로 출력해야한다.

UPDATE saleslog SET id = id+1
ORDER BY id DESC;

